{"mappings":"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","sources":["src/js/view/canvas.js","src/js/view/shapeView.js","src/js/helper.js","src/js/controller.js"],"sourcesContent":["/** @type {CanvasRenderingContext2D} */\r\n\r\nimport config from '../configuration.js';\r\n\r\nconst elDesk = document.querySelector('.desk__container');\r\nconst wrapperEl = document.querySelector('.wrapper__all');\r\n//canvas init\r\nconst canvas = document.getElementById('canvas1');\r\nconst ctx = canvas.getContext('2d');\r\n\r\nexport function drewBoundingBox(point1, point2) {\r\n    // ctx.arc(100, 75, 50, 0, 2 * Math.PI);\r\n    boundingBox(point1, point2);\r\n}\r\n\r\nexport function updateSize() {\r\n    // canvas.width = elDesk.offsetWidth;\r\n    // canvas.height = elDesk.offsetHeight;\r\n    canvas.width = elDesk.clientWidth;\r\n    canvas.height = elDesk.clientHeight;\r\n}\r\n\r\nexport function getCanvasOffset() {\r\n    const paddingLeft = window.getComputedStyle(wrapperEl, null).getPropertyValue('padding-left').replace('px', '');\r\n    const paddingRight = window.getComputedStyle(wrapperEl, null).getPropertyValue('padding-right').replace('px', '');\r\n    const paddingTop = window.getComputedStyle(wrapperEl, null).getPropertyValue('padding-top').replace('px', '');\r\n    const topBarHeiget = document.querySelector('.top-bar__container').offsetHeight;\r\n\r\n    return {\r\n        offSetLeft: Number(paddingLeft),\r\n        offSetRight: Number(paddingRight),\r\n        offSetTop: Number(topBarHeiget) + Number(paddingTop),\r\n    };\r\n}\r\n// function animate() {\r\n//     ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n//     boundingBox();\r\n//     requestAnimationFrame(animate);\r\n// }\r\n\r\nfunction boundingBox(startPoint, dimentions) {\r\n    // [375, 140],[450, 450]\r\n    // let startPoint = [375, 140];\r\n    // let dimentions = [450, 450];\r\n    //ctx.arc(x, y, radius, startAngle, endAngle [, counterclockwise]);\r\n    ctx.fillStyle = config.wireColor;\r\n    ctx.strokeStyle = config.cornerCircules;\r\n    ctx.beginPath();\r\n    ctx.arc(startPoint[0], startPoint[1], 5, 0, 2 * Math.PI);\r\n    ctx.fill();\r\n    ctx.beginPath();\r\n    ctx.arc(startPoint[0] + dimentions[0], startPoint[1], 5, 0, 2 * Math.PI);\r\n    ctx.fill();\r\n    ctx.beginPath();\r\n    ctx.arc(startPoint[0] + dimentions[0], startPoint[1] + dimentions[1], 5, 0, 2 * Math.PI);\r\n    ctx.fill();\r\n    ctx.beginPath();\r\n    ctx.arc(startPoint[0], startPoint[1] + dimentions[1], 5, 0, 2 * Math.PI);\r\n    ctx.fill();\r\n    //ctx.strokeRect(x, y, width, height);\r\n    ctx.lineWidth = 1;\r\n    ctx.strokeRect(startPoint[0], startPoint[1], dimentions[0], dimentions[1]);\r\n}\r\n\r\nfunction lineCircle() {\r\n    ctx.beginPath();\r\n    ctx.arc(100, 75, 50, 0, 2 * Math.PI);\r\n    ctx.stroke();\r\n}\r\nfunction house() {\r\n    ctx.lineWidth = 10;\r\n    // Wall\r\n    ctx.strokeRect(75, 140, 150, 110);\r\n    // Door\r\n    ctx.fillRect(130, 190, 40, 60);\r\n    // Roof\r\n    ctx.beginPath();\r\n    ctx.moveTo(50, 140);\r\n    ctx.lineTo(150, 60);\r\n    ctx.lineTo(250, 140);\r\n    ctx.closePath();\r\n    ctx.stroke();\r\n}\r\n","import { hexToRGB } from \"../helper\";\r\n\r\nconst inputArr = Array.from(document.querySelectorAll(\".input\"));\r\n\r\nclass ShapeCL {\r\n    #parentElement = document.querySelector(\".desk__main\");\r\n    #myElement = document.getElementById(\"my-element\");\r\n    #myElementText = document.querySelector(\".my-element__text\");\r\n    #inputText = document.getElementById(\"input-text\");\r\n\r\n    //self explanatory\r\n    #inputData = {\r\n        inputText: \"My element\",\r\n\r\n        fontSize: 2,\r\n        padding: 2,\r\n        color: \"#000\",\r\n        // textalign: true,\r\n        // textTransform: false,\r\n\r\n        backgroundColorCheck: false,\r\n        backgroundColor: \"#fcba03\",\r\n\r\n        borderRadiusCheck: false,\r\n        borderRadius: 0,\r\n\r\n        borderCheck: false,\r\n        borderAll: true,\r\n        borderSeparate: false,\r\n        borderWidth: 0.5,\r\n        borderType: \"solid\",\r\n        borderColor: \"#000\",\r\n\r\n        boxShadowCheck: false,\r\n        boxShadowOffsetXSlider: 0,\r\n        boxShadowOffsetX: 0,\r\n        boxShadowOffsetYSlider: 0.5,\r\n        boxShadowOffsetY: 0.5,\r\n        boxShadowBlurSlider: 1,\r\n        boxShadowBlur: 1,\r\n        boxShadowSpreadSlider: 0,\r\n        boxShadowSpread: 1,\r\n        boxShadowColor: \"#000\",\r\n        boxShadowAlphaSlider: 0.5,\r\n        boxShadowAlpha: 0.5,\r\n    };\r\n\r\n    //an array of the data properties\r\n    #inputDataPropArr() {\r\n        let propArr = [];\r\n        for (let prop in this.#inputData) {\r\n            propArr.push(prop);\r\n        }\r\n        return propArr;\r\n    }\r\n\r\n    //element width and height\r\n    getElementDimentions() {\r\n        return [this.#myElement.offsetWidth, this.#myElement.offsetHeight];\r\n    }\r\n\r\n    //center the element to the canvas\r\n    // not in use at the moment\r\n    centerShape() {\r\n        this.#myElement.style.marginLeft = this.#parentElement.offsetWidth / 2 + \"px\";\r\n        this.#myElement.style.marginTop = this.#parentElement.offsetHeight / 2 + \"px\";\r\n    }\r\n\r\n    //adding the input listeners\r\n    addInputListeners() {\r\n        inputArr.forEach((el, i) => {\r\n            if (el.type === \"radio\" || el.type === \"checkbox\") {\r\n                el.addEventListener(\"input\", (e) => {\r\n                    this.#setDataProperty(el.checked, i);\r\n                    // console.log(el.type, el.checked, i, \"checked\");\r\n                    this.updateMyElement();\r\n                    this.#hideElement(el);\r\n                });\r\n            } else {\r\n                el.addEventListener(\"input\", (e) => {\r\n                    this.#setDataProperty(el.value, i);\r\n                    // console.log(el.type, el.value, i, \"value\");\r\n                    this.updateMyElement();\r\n                });\r\n            }\r\n        });\r\n\r\n        this.#inputText.addEventListener(\"focus\", () => {\r\n            this.updateMyElement();\r\n            // this.blinkingCursor();\r\n        });\r\n    }\r\n\r\n    #addElementTextListener() {\r\n        this.#parentElement.lastChild.addEventListener(\"dblclick\", (e) => {\r\n            this.#inputText.focus();\r\n            //puts the cursor at the end of the line\r\n            let val = this.#inputText.value;\r\n            this.#inputText.value = \"\";\r\n            this.#inputText.value = val;\r\n        });\r\n    }\r\n\r\n    getInputText() {\r\n        return this.#inputText.value;\r\n    }\r\n\r\n    //setting the input values to the data obj\r\n    #setDataProperty(value, index) {\r\n        this.#inputData[this.#inputDataPropArr()[index]] = value;\r\n    }\r\n\r\n    //generating new updated markup and inserting to the UI\r\n    updateMyElement() {\r\n        this.#clear();\r\n        this.#parentElement.insertAdjacentHTML(\"afterbegin\", this.#generateElementStyle());\r\n        this.#addElementTextListener();\r\n    }\r\n\r\n    //clearing \"my element\"\r\n    #clear() {\r\n        this.#parentElement.innerHTML = \"\";\r\n    }\r\n\r\n    #hideElement(el) {\r\n        if (el.id) {\r\n            const elArr = Array.from(document.querySelectorAll(`.${el.id}`));\r\n            elArr.forEach((el, i) => {\r\n                el.classList.toggle(\"hidden\");\r\n            });\r\n        }\r\n    }\r\n\r\n    //generating new markup with the updated data obj\r\n    #generateElementStyle() {\r\n        return `\r\n        <style>\r\n            .my-element {\r\n                font-size: ${this.#inputData.fontSize}rem;\r\n                padding: ${this.#inputData.padding}rem;\r\n                color: ${this.#inputData.color};\r\n\r\n                background-color: ${this.#inputData.backgroundColor};\r\n\r\n                border-radius: ${this.#inputData.borderRadius}rem;\r\n\r\n                border: ${this.#inputData.borderWidth}rem \r\n                ${this.#inputData.borderType} \r\n                ${this.#inputData.borderColor};\r\n\r\n                box-shadow: ${this.#inputData.boxShadowOffsetXSlider}rem \r\n                ${this.#inputData.boxShadowOffsetYSlider}rem \r\n                ${this.#inputData.boxShadowBlurSlider}rem \r\n                ${this.#inputData.boxShadowSpreadSlider}rem \r\n                rgba(${hexToRGB(this.#inputData.boxShadowColor)},${this.#inputData.boxShadowAlphaSlider});\r\n            }\r\n            .my-element__text::selection{\r\n                color: gold;\r\n                background-color: red;\r\n            }\r\n        </style>\r\n        <div class=\"my-element\" id=\"my-element\">\r\n            <div class=\"my-element__text\">${this.#inputData.inputText}</div>\r\n        </div>`;\r\n    }\r\n}\r\n\r\nexport default new ShapeCL();\r\n","export function hexToRGB(h) {\r\n    let r = 0,\r\n        g = 0,\r\n        b = 0;\r\n\r\n    // 3 digits\r\n    if (h.length == 4) {\r\n        r = \"0x\" + h[1] + h[1];\r\n        g = \"0x\" + h[2] + h[2];\r\n        b = \"0x\" + h[3] + h[3];\r\n\r\n        // 6 digits\r\n    } else if (h.length == 7) {\r\n        r = \"0x\" + h[1] + h[2];\r\n        g = \"0x\" + h[3] + h[4];\r\n        b = \"0x\" + h[5] + h[6];\r\n    }\r\n\r\n    return `${+r},${+g},${+b}`;\r\n}\r\n","import { data } from \"./model\";\r\nimport ShapeCL from \"./view/shapeView.js\";\r\n\r\nconst styleSheetEl = document.getElementById(\"style-sheet\");\r\nconst btnDarkMode = document.getElementById(\"dark-theme\");\r\n\r\nbtnDarkMode.addEventListener(\"click\", () => {\r\n    styleSheetEl.setAttribute(\"href\", \"src/sass/mainDark.scss\");\r\n});\r\n\r\nconst canvasEl = document.getElementById(\"canvas1\");\r\n\r\n// function shapeController() {\r\n//     console.log(\"shapeController call\");\r\n// }\r\n// //adjasting to window resize\r\n// window.addEventListener(\"resize\", () => {\r\n//     shapeController();\r\n// });\r\n\r\nfunction init() {\r\n    ShapeCL.addInputListeners();\r\n    ShapeCL.updateMyElement();\r\n}\r\n\r\ninit();\r\n"],"names":["document","querySelector","$a60723fa36447c89$var$canvas","getElementById","getContext","$ae96c774273fdf97$var$inputArr","Array","from","querySelectorAll","parentElement","myElement","myElementText","inputText","inputData","fontSize","padding","color","backgroundColorCheck","backgroundColor","borderRadiusCheck","borderRadius","borderCheck","borderAll","borderSeparate","borderWidth","borderType","borderColor","boxShadowCheck","boxShadowOffsetXSlider","boxShadowOffsetX","boxShadowOffsetYSlider","boxShadowOffsetY","boxShadowBlurSlider","boxShadowBlur","boxShadowSpreadSlider","boxShadowSpread","boxShadowColor","boxShadowAlphaSlider","boxShadowAlpha","inputDataPropArr","propArr","prop","this","push","getElementDimentions","offsetWidth","offsetHeight","centerShape","style","marginLeft","marginTop","addInputListeners","forEach","el","i","type","addEventListener","e","setDataProperty","checked","updateMyElement","hideElement","value","addElementTextListener","lastChild","focus","val","getInputText","index","clear","insertAdjacentHTML","generateElementStyle","innerHTML","el1","id","classList","toggle","h","r","g","b","length","$e59237c46c570137$var$styleSheetEl","setAttribute","$ae96c774273fdf97$export$2e2bcd8739ae039"],"version":3,"file":"index.8e1565da.js.map"}